Kristen Chui: 104289172
Alex Hesselgrave: 904273474

CS 111 Lab 1:

1a:
We used the built in function pointer for get_next_byte to read the whole script into a buffer that
can reallocate if needed. For reading in the command, we created a token stream which tokenized based
on the 8 special tokens in the spec as well as backticks. The token stream contained a linked list of tokens
and the type of the token (e.g WORD token, AND_OR token) Then we validated the token stream before converting
the tokens into the corresponding command trees by confirming that the next token type is valid to appear after
the current token being processed. In the validate function, we also truncated extra spaces and newlines

To create command trees, we used 2 stacks to sort through operators and words/simple commands. Depending
on the precedence of the operator as well as certain corner cases, we either pushed the operator onto the stack
or combined it with words to create a simple command. We stored the command trees into command_stream as a linked list,
which was traversed in read_command_stream.

To our knowledge, there are no limitations to our design. Malloced blocks are reallocated if they can possibly grow, and
all special tokens and trailing whitespace are accounted for.

1b:
For execute-command.c, we created a switch statement which executed a different
function depending on the type of command passed in. To execute the commands,
we used different system calls including execvp, fork, waitpid, pipe, and dup2.

At the end of the day, we just recursively call execute_command and set up to run
execute_simple for SIMPLE_COMMAND types, which will create an argument vector and
run execvp in the child. If that fails, then the program is not in the PATH and
an appropriate error message will be printed to stderr. All the other execute_* functions
use the appropriate system call(s) to create child to recurse down the command tree.

1c:
Before running commands in parallel, we had to check dependencies across all the commands. First, we added a level to commands,
the default being 1. This will be explained more later.
We used a struct called file_vector_t which contained a list of file names and a virtual lookup table of helper functions to find and insert file names.
We used two of these structs, one for reads and one for writes. We iterated through every command and added the appropriate filenames
to the appropriate vector. If a command depended on a file already in the list, we incremented its level by 1. Eventually, every command is accounted for and
has its appropriate level.

Our approach doesn't actually care what command depends on which one, because it really doesn't matter. Every command in the same level has no dependencies amongst
each other, and higher level commands have to wait for all the lower level commands to execute, which is precisely what we did. We made a FIFO queue of command streams,
each one holding all commands of a certain level. Then we popped the queue and executed each stream serially, with each command in the stream executed in parallel via forking.