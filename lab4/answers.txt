# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Alex Hesselgrave
Student ID: 904273474
Email: ahesselgrave@ucla.edu

# Partner 2 (if you're working in a team)
Name: Kristen Chui
Student ID: 104289172
Email: kwchui@g.ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

One major place that could trigger a buffer overrun is any strcpy call since
there is nothing to prevent a very long file name to cause buffer overflow.
To resolve this issue, we replaced strcpy with strncpy and limited the max
number of characters which could be written to FILENAMESIZ.

Actual locations of changes: start_download, task_download

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

One problem we solved was restricting access to files outside of the test
directory. To implement this, we used getcwd() to find the current working
directory and realpath() to generate the absolute path of the requested file.
Then we compared the current working directory with the absolute path, and if
there was no match, the requested file was out of the scope of the current
working directory. (in task_upload function)

Another issue we solved was setting a max size of how much we can store to
avoid others from filling up our disk space. To do so, in the task_download
function, we checked that t->total_written, which is the total number of bytes
written by write_to_taskbuf, was less than an arbitrarily large value, defined
by MAXFILESIZE.

If there were too many peers logged in at once, our peer would not be able to
download anything because the communications with the tracker would be confused
. To resolve this issue, we simply increased the task buffer size
TASKBUFFERSIZ to be 10 times larger than before.

The last issue we resolved was setting a max time limit for peers to transfer
data so that if network connection was very slow, we could switch peers. To
implement this, we needed to set a minimum transfer speed. We also needed
a way to determine the transfer speed of the current task. To calculate the
current transfer speed, we took a sample of 10 tasks and computed the average
transfer speed. If the average speed < minimum transfer speed, we would
switch to another peer. (in function task_download)

# Add any other information you'd like us to know below this line.

An issue with using strncpy is that if a file name is longer than FILENAMESIZ,
the file name will be truncated and when looking for this file, it will be
invalid. A solution to this issue would be to check if the length of the file
name > FILENAMESIZ and if true, print an error and skip that file.
